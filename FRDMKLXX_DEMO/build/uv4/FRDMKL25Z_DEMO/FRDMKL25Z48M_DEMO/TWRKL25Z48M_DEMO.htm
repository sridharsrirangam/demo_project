<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\FRDMKL25Z48M_DEMO\TWRKL25Z48M_DEMO.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\FRDMKL25Z48M_DEMO\TWRKL25Z48M_DEMO.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5050106: Last Updated: Tue Jan 20 15:53:23 2015
<BR><P>
<H3>Maximum Stack Usage =        168 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
TSS_ASliderDecoder &rArr; TSS_SetControlElectrodesEnablers &rArr; TSS_SensorInit &rArr; TSS_BrowseModules
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">SVC_Handler</a><BR>
 <LI><a href="#[4]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">PendSV_Handler</a><BR>
 <LI><a href="#[5]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">SysTick_Handler</a><BR>
 <LI><a href="#[15]">ADC0_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[15]">ADC0_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[15]">ADC0_IRQHandler</a> from startup_mkl25z4.o(.text) referenced from startup_mkl25z4.o(RESET)
 <LI><a href="#[16]">CMP0_IRQHandler</a> from startup_mkl25z4.o(.text) referenced from startup_mkl25z4.o(RESET)
 <LI><a href="#[1f]">DAC0_IRQHandler</a> from startup_mkl25z4.o(.text) referenced from startup_mkl25z4.o(RESET)
 <LI><a href="#[6]">DMA0_IRQHandler</a> from startup_mkl25z4.o(.text) referenced from startup_mkl25z4.o(RESET)
 <LI><a href="#[7]">DMA1_IRQHandler</a> from startup_mkl25z4.o(.text) referenced from startup_mkl25z4.o(RESET)
 <LI><a href="#[8]">DMA2_IRQHandler</a> from startup_mkl25z4.o(.text) referenced from startup_mkl25z4.o(RESET)
 <LI><a href="#[9]">DMA3_IRQHandler</a> from startup_mkl25z4.o(.text) referenced from startup_mkl25z4.o(RESET)
 <LI><a href="#[12]">FMSTR_Isr</a> from freemaster_kxx.o(.text) referenced from startup_mkl25z4.o(RESET)
 <LI><a href="#[b]">FTFA_IRQHandler</a> from startup_mkl25z4.o(.text) referenced from startup_mkl25z4.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_mkl25z4.o(.text) referenced from startup_mkl25z4.o(RESET)
 <LI><a href="#[e]">I2C0_IRQHandler</a> from startup_mkl25z4.o(.text) referenced from startup_mkl25z4.o(RESET)
 <LI><a href="#[f]">I2C1_IRQHandler</a> from startup_mkl25z4.o(.text) referenced from startup_mkl25z4.o(RESET)
 <LI><a href="#[d]">LLW_IRQHandler</a> from startup_mkl25z4.o(.text) referenced from startup_mkl25z4.o(RESET)
 <LI><a href="#[22]">LPTMRIsr</a> from board.o(.text) referenced from startup_mkl25z4.o(RESET)
 <LI><a href="#[c]">LVD_LVW_IRQHandler</a> from startup_mkl25z4.o(.text) referenced from startup_mkl25z4.o(RESET)
 <LI><a href="#[21]">MCG_IRQHandler</a> from startup_mkl25z4.o(.text) referenced from startup_mkl25z4.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_mkl25z4.o(.text) referenced from startup_mkl25z4.o(RESET)
 <LI><a href="#[1c]">PIT_IRQHandler</a> from startup_mkl25z4.o(.text) referenced from startup_mkl25z4.o(RESET)
 <LI><a href="#[24]">PORTA_IRQHandler</a> from startup_mkl25z4.o(.text) referenced from startup_mkl25z4.o(RESET)
 <LI><a href="#[25]">PORTD_IRQHandler</a> from startup_mkl25z4.o(.text) referenced from startup_mkl25z4.o(RESET)
 <LI><a href="#[4]">PendSV_Handler</a> from startup_mkl25z4.o(.text) referenced from startup_mkl25z4.o(RESET)
 <LI><a href="#[1a]">RTC_IRQHandler</a> from startup_mkl25z4.o(.text) referenced from startup_mkl25z4.o(RESET)
 <LI><a href="#[1b]">RTC_Seconds_IRQHandler</a> from startup_mkl25z4.o(.text) referenced from startup_mkl25z4.o(RESET)
 <LI><a href="#[a]">Reserved20_IRQHandler</a> from startup_mkl25z4.o(.text) referenced from startup_mkl25z4.o(RESET)
 <LI><a href="#[1d]">Reserved39_IRQHandler</a> from startup_mkl25z4.o(.text) referenced from startup_mkl25z4.o(RESET)
 <LI><a href="#[23]">Reserved45_IRQHandler</a> from startup_mkl25z4.o(.text) referenced from startup_mkl25z4.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_mkl25z4.o(.text) referenced from startup_mkl25z4.o(RESET)
 <LI><a href="#[10]">SPI0_IRQHandler</a> from startup_mkl25z4.o(.text) referenced from startup_mkl25z4.o(RESET)
 <LI><a href="#[11]">SPI1_IRQHandler</a> from startup_mkl25z4.o(.text) referenced from startup_mkl25z4.o(RESET)
 <LI><a href="#[3]">SVC_Handler</a> from startup_mkl25z4.o(.text) referenced from startup_mkl25z4.o(RESET)
 <LI><a href="#[5]">SysTick_Handler</a> from startup_mkl25z4.o(.text) referenced from startup_mkl25z4.o(RESET)
 <LI><a href="#[28]">SystemInit</a> from system_mkl25z4.o(.text) referenced from startup_mkl25z4.o(.text)
 <LI><a href="#[17]">TPM0_IRQHandler</a> from startup_mkl25z4.o(.text) referenced from startup_mkl25z4.o(RESET)
 <LI><a href="#[18]">TPM1_IRQHandler</a> from startup_mkl25z4.o(.text) referenced from startup_mkl25z4.o(RESET)
 <LI><a href="#[19]">TPM2_IRQHandler</a> from startup_mkl25z4.o(.text) referenced from startup_mkl25z4.o(RESET)
 <LI><a href="#[2c]">TSIL_MethodControl</a> from tss_sensortsil.o(.text) referenced from tss_sensortsil.o(.constdata)
 <LI><a href="#[2b]">TSIL_SampleElectrode</a> from tss_sensortsil.o(.text) referenced 2 times from tss_sensor.o(.constdata)
 <LI><a href="#[2d]">TSS1_fCallBack1</a> from events.o(.text) referenced from tss_systemsetupdata.o(.constdata)
 <LI><a href="#[3a]">TSS_ASliderCalculatePosIIRFilter</a> from tss_asliderdecoder.o(i.TSS_ASliderCalculatePosIIRFilter) referenced from tss_systemsetupdata.o(.constdata)
 <LI><a href="#[2e]">TSS_ASliderDecoder</a> from tss_asliderdecoder.o(i.TSS_ASliderDecoder) referenced from tss_systemsetupdata.o(.constdata)
 <LI><a href="#[3c]">TSS_ASliderTrendControl</a> from tss_asliderdecoder.o(i.TSS_ASliderTrendControl) referenced from tss_systemsetupdata.o(.constdata)
 <LI><a href="#[3b]">TSS_ASliderTrendThreshold</a> from tss_asliderdecoder.o(i.TSS_ASliderTrendThreshold) referenced from tss_systemsetupdata.o(.constdata)
 <LI><a href="#[34]">TSS_DataCorruptionCheck</a> from tss_main.o(i.TSS_DataCorruptionCheck) referenced from tss_systemsetupdata.o(.constdata)
 <LI><a href="#[2f]">TSS_DecodersControl</a> from tss_main.o(i.TSS_DecodersControl) referenced from tss_systemsetupdata.o(.constdata)
 <LI><a href="#[43]">TSS_KeyBasicDeltaNoiseAnalysisIIRControl</a> from tss_keydetectornormal.o(i.TSS_KeyBasicDeltaNoiseAnalysisIIRControl) referenced from tss_systemsetupdata.o(.constdata)
 <LI><a href="#[44]">TSS_KeyBasicElectrodeEval</a> from tss_keydetectornormal.o(i.TSS_KeyBasicElectrodeEval) referenced from tss_systemsetupdata.o(.constdata)
 <LI><a href="#[3f]">TSS_KeyBasicNegativeBaselineDrop</a> from tss_keydetectornormal.o(i.TSS_KeyBasicNegativeBaselineDrop) referenced from tss_systemsetupdata.o(.constdata)
 <LI><a href="#[42]">TSS_KeyBasicSensAutoCalibration</a> from tss_keydetectornormal.o(i.TSS_KeyBasicSensAutoCalibration) referenced from tss_systemsetupdata.o(.constdata)
 <LI><a href="#[3d]">TSS_KeyBasicStuckKeyControl</a> from tss_keydetectornormal.o(i.TSS_KeyBasicStuckKeyControl) referenced from tss_systemsetupdata.o(.constdata)
 <LI><a href="#[30]">TSS_KeyDetectorCalculateIIRFilter</a> from tss_filters.o(i.TSS_KeyDetectorCalculateIIRFilter) referenced from tss_systemsetupdata.o(.constdata)
 <LI><a href="#[32]">TSS_KeyDetectorFillDeltaLogBuffer</a> from tss_keydetector.o(i.TSS_KeyDetectorFillDeltaLogBuffer) referenced from tss_systemsetupdata.o(.constdata)
 <LI><a href="#[33]">TSS_KeyDetectorFillSignalLogBuffer</a> from tss_keydetector.o(i.TSS_KeyDetectorFillSignalLogBuffer) referenced from tss_systemsetupdata.o(.constdata)
 <LI><a href="#[31]">TSS_KeyDetectorInitPrevCapSample</a> from tss_filters.o(i.TSS_KeyDetectorInitPrevCapSample) referenced from tss_systemsetupdata.o(.constdata)
 <LI><a href="#[2a]">TSS_KeyDetectorRecalibrateElectrode</a> from tss_keydetector.o(i.TSS_KeyDetectorRecalibrateElectrode) referenced from tss_keydetector.o(i.TSS_KeyDetectorRecalibrateModules)
 <LI><a href="#[40]">TSS_KeyDetectorRecalibrationRequest</a> from tss_keydetector.o(i.TSS_KeyDetectorRecalibrationRequest) referenced from tss_systemsetupdata.o(.constdata)
 <LI><a href="#[3e]">TSS_KeyDetectorResetStuckKeyCounter</a> from tss_keydetector.o(i.TSS_KeyDetectorResetStuckKeyCounter) referenced from tss_systemsetupdata.o(.constdata)
 <LI><a href="#[41]">TSS_KeyDetectorSignalDivider</a> from tss_filters.o(i.TSS_KeyDetectorSignalDivider) referenced from tss_systemsetupdata.o(.constdata)
 <LI><a href="#[37]">TSS_LowPowerConfig</a> from tss_main.o(i.TSS_LowPowerConfig) referenced from tss_systemsetupdata.o(.constdata)
 <LI><a href="#[27]">TSS_SensorInitCallback</a> from tss_sensor.o(.text) referenced from tss_sensor.o(.text)
 <LI><a href="#[20]">TSS_TSI0Isr</a> from tss_sensortsil.o(.text) referenced from startup_mkl25z4.o(RESET)
 <LI><a href="#[35]">TSS_TriggerConfig</a> from tss_main.o(i.TSS_TriggerConfig) referenced from tss_systemsetupdata.o(.constdata)
 <LI><a href="#[36]">TSS_TriggerControl</a> from tss_main.o(i.TSS_TriggerControl) referenced from tss_systemsetupdata.o(.constdata)
 <LI><a href="#[38]">TSS_fOnFault</a> from events.o(.text) referenced from tss_systemsetupdata.o(.constdata)
 <LI><a href="#[39]">TSS_fOnInit</a> from events.o(.text) referenced from tss_systemsetupdata.o(.constdata)
 <LI><a href="#[13]">UART1_IRQHandler</a> from startup_mkl25z4.o(.text) referenced from startup_mkl25z4.o(RESET)
 <LI><a href="#[14]">UART2_IRQHandler</a> from startup_mkl25z4.o(.text) referenced from startup_mkl25z4.o(RESET)
 <LI><a href="#[1e]">USB0_IRQHandler</a> from startup_mkl25z4.o(.text) referenced from startup_mkl25z4.o(RESET)
 <LI><a href="#[29]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_mkl25z4.o(.text)
 <LI><a href="#[26]">main</a> from main.o(.text) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[29]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(.text)
</UL>
<P><STRONG><a name="[cc]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[45]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[b0]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[cd]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[ce]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[cf]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[d0]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[d1]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[47]"></a>InitPorts</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, app_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = InitPorts
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdog_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4b]"></a>DelayMS</STRONG> (Thumb, 94 bytes, Stack size 20 bytes, app_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = DelayMS
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTMRIsr
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS1_fCallBack1
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_Init_ASlider
</UL>

<P><STRONG><a name="[49]"></a>TSS_Init_ASlider</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, app_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = TSS_Init_ASlider &rArr; TSS_SetASliderConfig &rArr; TSS_SetControlElectrodesEnablers &rArr; TSS_SensorInit &rArr; TSS_BrowseModules
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_SetSystemConfig
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_SetASliderConfig
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_Init
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTMRStop
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTMRInit
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMS
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2d]"></a>TSS1_fCallBack1</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, events.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = TSS1_fCallBack1 &rArr; DelayMS
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMS
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tss_systemsetupdata.o(.constdata)
</UL>
<P><STRONG><a name="[38]"></a>TSS_fOnFault</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, events.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = TSS_fOnFault &rArr; TSS_SetSystemConfig &rArr; TSS_Init &rArr; TSS_KeyDetectorInit &rArr; TSS_SensorInit &rArr; TSS_BrowseModules
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_SetSystemConfig
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tss_systemsetupdata.o(.constdata)
</UL>
<P><STRONG><a name="[39]"></a>TSS_fOnInit</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, events.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TSS_fOnInit
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDevices
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tss_systemsetupdata.o(.constdata)
</UL>
<P><STRONG><a name="[56]"></a>TSS_FmstrIsrCallbackCustom</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, events.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMSTR_Isr
</UL>

<P><STRONG><a name="[62]"></a>FMSTR_InitScope</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, freemaster_scope.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMSTR_Init
</UL>

<P><STRONG><a name="[51]"></a>FMSTR_SetUpScope</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, freemaster_scope.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMSTR_AddressFromBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMSTR_ProtocolDecoder
</UL>

<P><STRONG><a name="[53]"></a>FMSTR_ReadScope</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, freemaster_scope.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMSTR_CopyToBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMSTR_ProtocolDecoder
</UL>

<P><STRONG><a name="[12]"></a>FMSTR_Isr</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, freemaster_kxx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FMSTR_Isr &rArr; FMSTR_ProcessSCI &rArr; FMSTR_Tx
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMSTR_ProcessSCI
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_FmstrIsrCallbackCustom
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(RESET)
</UL>
<P><STRONG><a name="[d2]"></a>FMSTR_CopyMemory</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, freemaster_kxx.o(.text), UNUSED)

<P><STRONG><a name="[54]"></a>FMSTR_CopyToBuffer</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, freemaster_kxx.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMSTR_ValueToBuffer32
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMSTR_ValueToBuffer16
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMSTR_AddressToBuffer
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMSTR_ReadScope
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMSTR_ReadVar
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMSTR_ReadMem
</UL>

<P><STRONG><a name="[58]"></a>FMSTR_CopyFromBuffer</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, freemaster_kxx.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMSTR_ValueFromBuffer32
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMSTR_ValueFromBuffer16
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMSTR_AddressFromBuffer
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMSTR_WriteVar
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMSTR_WriteMem
</UL>

<P><STRONG><a name="[57]"></a>FMSTR_ValueFromBuffer16</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, freemaster_kxx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMSTR_CopyFromBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMSTR_GetTsaInfo
</UL>

<P><STRONG><a name="[59]"></a>FMSTR_ValueFromBuffer32</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, freemaster_kxx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMSTR_CopyFromBuffer
</UL>

<P><STRONG><a name="[5a]"></a>FMSTR_ValueToBuffer16</STRONG> (Thumb, 12 bytes, Stack size 12 bytes, freemaster_kxx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMSTR_CopyToBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMSTR_GetTsaInfo
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMSTR_GetStringLen
</UL>

<P><STRONG><a name="[5b]"></a>FMSTR_ValueToBuffer32</STRONG> (Thumb, 12 bytes, Stack size 12 bytes, freemaster_kxx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMSTR_CopyToBuffer
</UL>

<P><STRONG><a name="[65]"></a>FMSTR_CopyFromBufferWithMask</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, freemaster_kxx.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMSTR_WriteVarMask
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMSTR_WriteMemMask
</UL>

<P><STRONG><a name="[69]"></a>FMSTR_SetExAddr</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, freemaster_kxx.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMSTR_ProtocolDecoder
</UL>

<P><STRONG><a name="[5c]"></a>FMSTR_AddressToBuffer</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, freemaster_kxx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMSTR_CopyToBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMSTR_GetTsaInfo
</UL>

<P><STRONG><a name="[52]"></a>FMSTR_AddressFromBuffer</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, freemaster_kxx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMSTR_CopyFromBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMSTR_SetUpScope
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMSTR_GetStringLen
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMSTR_WriteVarMask
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMSTR_WriteVar
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMSTR_ReadVar
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMSTR_ReadMem
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMSTR_WriteMem
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMSTR_WriteMemMask
</UL>

<P><STRONG><a name="[48]"></a>wdog_disable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, wdog_kl25.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPorts
</UL>

<P><STRONG><a name="[d3]"></a>TSS_SampleElectrodeLowE0</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tss_sensor.o(.text), UNUSED)

<P><STRONG><a name="[d4]"></a>TSS_SampleElectrodeLowE1</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tss_sensor.o(.text), UNUSED)

<P><STRONG><a name="[27]"></a>TSS_SensorInitCallback</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tss_sensor.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> tss_sensor.o(.text)
</UL>
<P><STRONG><a name="[5d]"></a>TSS_SensorInit</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, tss_sensor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TSS_SensorInit &rArr; TSS_BrowseModules
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_BrowseModules
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_TriggerConfig
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_LowPowerConfig
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_SetSystemConfig
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_KeyDetectorMain
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_KeyDetectorInit
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_SetControlElectrodesEnablers
</UL>

<P><STRONG><a name="[c6]"></a>TSS_IIRFilterEquation</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tss_systemsetupdata.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_KeyDetectorCalculateIIRFilter
</UL>

<P><STRONG><a name="[28]"></a>SystemInit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, system_mkl25z4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = SystemInit &rArr; sysinit &rArr; pll_init &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysinit
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdog_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(.text)
</UL>
<P><STRONG><a name="[60]"></a>FMSTR_Init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, freemaster_protocol.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMSTR_InitTsa
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMSTR_InitSerial
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMSTR_InitScope
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeMASTER_Init
</UL>

<P><STRONG><a name="[6d]"></a>FMSTR_GetBoardInfo</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, freemaster_protocol.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMSTR_ProtocolDecoder
</UL>

<P><STRONG><a name="[64]"></a>FMSTR_WriteMemMask</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, freemaster_protocol.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMSTR_CopyFromBufferWithMask
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMSTR_AddressFromBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMSTR_ProtocolDecoder
</UL>

<P><STRONG><a name="[66]"></a>FMSTR_WriteMem</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, freemaster_protocol.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMSTR_CopyFromBuffer
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMSTR_AddressFromBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMSTR_ProtocolDecoder
</UL>

<P><STRONG><a name="[67]"></a>FMSTR_ReadMem</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, freemaster_protocol.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMSTR_CopyToBuffer
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMSTR_AddressFromBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMSTR_ProtocolDecoder
</UL>

<P><STRONG><a name="[68]"></a>FMSTR_ProtocolDecoder</STRONG> (Thumb, 176 bytes, Stack size 8 bytes, freemaster_protocol.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMSTR_SetUpScope
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMSTR_SetExAddr
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMSTR_SendResponse
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMSTR_ReadScope
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMSTR_GetTsaInfo
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMSTR_GetStringLen
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMSTR_ReadMem
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMSTR_WriteMem
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMSTR_WriteMemMask
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMSTR_GetBoardInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMSTR_Rx
</UL>

<P><STRONG><a name="[6e]"></a>FMSTR_ReadVar</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, freemaster_protocol.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMSTR_CopyToBuffer
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMSTR_AddressFromBuffer
</UL>

<P><STRONG><a name="[6f]"></a>FMSTR_WriteVar</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, freemaster_protocol.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMSTR_CopyFromBuffer
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMSTR_AddressFromBuffer
</UL>

<P><STRONG><a name="[70]"></a>FMSTR_WriteVarMask</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, freemaster_protocol.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMSTR_CopyFromBufferWithMask
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMSTR_AddressFromBuffer
</UL>

<P><STRONG><a name="[77]"></a>FMSTR_StrLen</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, freemaster_protocol.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMSTR_CheckTsaSpace
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMSTR_GetStringLen
</UL>

<P><STRONG><a name="[6a]"></a>FMSTR_SendResponse</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, freemaster_serial.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMSTR_SendError
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMSTR_ProtocolDecoder
</UL>

<P><STRONG><a name="[71]"></a>FMSTR_Rx</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, freemaster_serial.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMSTR_SendError
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMSTR_ProtocolDecoder
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMSTR_Poll
</UL>

<P><STRONG><a name="[73]"></a>FMSTR_Tx</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, freemaster_serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FMSTR_Tx
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMSTR_Listen
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMSTR_ProcessSCI
</UL>

<P><STRONG><a name="[55]"></a>FMSTR_ProcessSCI</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, freemaster_serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FMSTR_ProcessSCI &rArr; FMSTR_Tx
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMSTR_Tx
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMSTR_Isr
</UL>

<P><STRONG><a name="[63]"></a>FMSTR_InitSerial</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, freemaster_serial.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMSTR_Listen
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMSTR_Init
</UL>

<P><STRONG><a name="[75]"></a>FMSTR_Poll</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, freemaster_serial.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMSTR_Rx
</UL>

<P><STRONG><a name="[61]"></a>FMSTR_InitTsa</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, freemaster_tsa.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMSTR_Init
</UL>

<P><STRONG><a name="[6b]"></a>FMSTR_GetTsaInfo</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, freemaster_tsa.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMSTR_ValueToBuffer16
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMSTR_ValueFromBuffer16
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMSTR_TsaGetTable
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMSTR_AddressToBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMSTR_ProtocolDecoder
</UL>

<P><STRONG><a name="[6c]"></a>FMSTR_GetStringLen</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, freemaster_tsa.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMSTR_ValueToBuffer16
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMSTR_AddressFromBuffer
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMSTR_StrLen
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMSTR_ProtocolDecoder
</UL>

<P><STRONG><a name="[78]"></a>FMSTR_CheckTsaSpace</STRONG> (Thumb, 216 bytes, Stack size 40 bytes, freemaster_tsa.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMSTR_TsaGetTable
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMSTR_CheckMemSpace
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMSTR_StrLen
</UL>

<P><STRONG><a name="[ac]"></a>stop</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, arm_cm0.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GotoLowPower
</UL>

<P><STRONG><a name="[d5]"></a>wait</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, arm_cm0.o(.text), UNUSED)

<P><STRONG><a name="[d6]"></a>write_vtor</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, arm_cm0.o(.text), UNUSED)

<P><STRONG><a name="[a9]"></a>enable_irq</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, arm_cm0.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTMRInit
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeMASTER_Init
</UL>

<P><STRONG><a name="[aa]"></a>disable_irq</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, arm_cm0.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTMRStop
</UL>

<P><STRONG><a name="[d7]"></a>set_irq_priority</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_cm0.o(.text), UNUSED)

<P><STRONG><a name="[7a]"></a>clk_out_init</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, sysinit_kl25.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysinit
</UL>

<P><STRONG><a name="[5f]"></a>sysinit</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, sysinit_kl25.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = sysinit &rArr; pll_init &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pll_init
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clk_out_init
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[7b]"></a>pll_init</STRONG> (Thumb, 498 bytes, Stack size 24 bytes, mcg_kl25.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = pll_init &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysinit
</UL>

<P><STRONG><a name="[d8]"></a>pee_pbe</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, mcg_kl25.o(.text), UNUSED)

<P><STRONG><a name="[7d]"></a>pbe_pee</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, mcg_kl25.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>

<P><STRONG><a name="[d9]"></a>pbe_fbe</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, mcg_kl25.o(.text), UNUSED)

<P><STRONG><a name="[7e]"></a>fbe_pbe</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, mcg_kl25.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>

<P><STRONG><a name="[da]"></a>pbe_blpe</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, mcg_kl25.o(.text), UNUSED)

<P><STRONG><a name="[7f]"></a>blpe_pbe</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, mcg_kl25.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>

<P><STRONG><a name="[db]"></a>blpe_fbe</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, mcg_kl25.o(.text), UNUSED)

<P><STRONG><a name="[dc]"></a>fbe_blpe</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, mcg_kl25.o(.text), UNUSED)

<P><STRONG><a name="[81]"></a>fll_freq</STRONG> (Thumb, 210 bytes, Stack size 20 bytes, mcg_kl25.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fee_fei
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fei_fee
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fbi_fei
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fbi_fee
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fbe_fee
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fbe_fei
</UL>

<P><STRONG><a name="[80]"></a>fbe_fei</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, mcg_kl25.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fll_freq
</UL>

<P><STRONG><a name="[dd]"></a>fei_fbe</STRONG> (Thumb, 298 bytes, Stack size 20 bytes, mcg_kl25.o(.text), UNUSED)

<P><STRONG><a name="[82]"></a>fbe_fee</STRONG> (Thumb, 222 bytes, Stack size 8 bytes, mcg_kl25.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fll_freq
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>

<P><STRONG><a name="[de]"></a>fee_fbe</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, mcg_kl25.o(.text), UNUSED)

<P><STRONG><a name="[83]"></a>fbe_fbi</STRONG> (Thumb, 246 bytes, Stack size 16 bytes, mcg_kl25.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>

<P><STRONG><a name="[df]"></a>fbi_fbe</STRONG> (Thumb, 306 bytes, Stack size 20 bytes, mcg_kl25.o(.text), UNUSED)

<P><STRONG><a name="[84]"></a>fbi_blpi</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, mcg_kl25.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>

<P><STRONG><a name="[85]"></a>blpi_fbi</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, mcg_kl25.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>

<P><STRONG><a name="[86]"></a>fbi_fee</STRONG> (Thumb, 400 bytes, Stack size 24 bytes, mcg_kl25.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fll_freq
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>

<P><STRONG><a name="[87]"></a>fee_fbi</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, mcg_kl25.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>

<P><STRONG><a name="[88]"></a>fbi_fei</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, mcg_kl25.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fll_freq
</UL>

<P><STRONG><a name="[89]"></a>fei_fbi</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, mcg_kl25.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>

<P><STRONG><a name="[8a]"></a>fei_fee</STRONG> (Thumb, 290 bytes, Stack size 24 bytes, mcg_kl25.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fll_freq
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>

<P><STRONG><a name="[8b]"></a>fee_fei</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, mcg_kl25.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fll_freq
</UL>

<P><STRONG><a name="[8d]"></a>what_mcg_mode</STRONG> (Thumb, 300 bytes, Stack size 0 bytes, mcg_kl25.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atc
</UL>

<P><STRONG><a name="[8c]"></a>atc</STRONG> (Thumb, 312 bytes, Stack size 40 bytes, mcg_kl25.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;what_mcg_mode
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[e0]"></a>clk_monitor_0</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, mcg_kl25.o(.text), UNUSED)

<P><STRONG><a name="[94]"></a>uart_init</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, uart_kl25.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>

<P><STRONG><a name="[95]"></a>uart_getchar</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, uart_kl25.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_getchar
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_getchar
</UL>

<P><STRONG><a name="[96]"></a>uart_putchar</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, uart_kl25.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_putchar
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_putchar
</UL>

<P><STRONG><a name="[e1]"></a>uart_getchar_present</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, uart_kl25.o(.text), UNUSED)

<P><STRONG><a name="[97]"></a>uart0_init</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, uart_kl25.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeMASTER_Init
</UL>

<P><STRONG><a name="[98]"></a>uart0_getchar</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, uart_kl25.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_getchar
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_getchar
</UL>

<P><STRONG><a name="[99]"></a>uart0_putchar</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, uart_kl25.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_putchar
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_putchar
</UL>

<P><STRONG><a name="[e2]"></a>uart0_getchar_present</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, uart_kl25.o(.text), UNUSED)

<P><STRONG><a name="[9d]"></a>TSIL_InitModule</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, tss_sensortsil.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSIL_MethodControl
</UL>

<P><STRONG><a name="[9e]"></a>TSIL_SetNSamples</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, tss_sensortsil.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSIL_MethodControl
</UL>

<P><STRONG><a name="[9f]"></a>TSIL_InitLowPower</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, tss_sensortsil.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TSIL_InitLowPower
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSIL_MethodControl
</UL>

<P><STRONG><a name="[a0]"></a>TSIL_InitPEN</STRONG> (Thumb, 198 bytes, Stack size 20 bytes, tss_sensortsil.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TSIL_InitPEN
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSIL_MethodControl
</UL>

<P><STRONG><a name="[a1]"></a>TSIL_Recalibrate</STRONG> (Thumb, 628 bytes, Stack size 80 bytes, tss_sensortsil.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = TSIL_Recalibrate
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSIL_MethodControl
</UL>

<P><STRONG><a name="[9a]"></a>TSIL_InitThresholds</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, tss_sensortsil.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TSIL_InitThresholds &rArr; TSS_GetSystemConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_GetSystemConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSIL_MethodControl
</UL>

<P><STRONG><a name="[a2]"></a>TSIL_InitTrigger</STRONG> (Thumb, 198 bytes, Stack size 20 bytes, tss_sensortsil.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TSIL_InitTrigger
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSIL_MethodControl
</UL>

<P><STRONG><a name="[2c]"></a>TSIL_MethodControl</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, tss_sensortsil.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = TSIL_MethodControl &rArr; TSIL_Recalibrate
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSIL_InitTrigger
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSIL_InitThresholds
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSIL_Recalibrate
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSIL_InitPEN
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSIL_InitLowPower
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSIL_SetNSamples
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSIL_InitModule
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSIL_SampleElectrode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tss_sensortsil.o(.constdata)
</UL>
<P><STRONG><a name="[a4]"></a>TSIL_ReadCounter</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, tss_sensortsil.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TSIL_ReadCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSIL_SampleElectrode
</UL>

<P><STRONG><a name="[a3]"></a>TSIL_HandleMeasurement</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, tss_sensortsil.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TSIL_HandleMeasurement
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSIL_SampleElectrode
</UL>

<P><STRONG><a name="[2b]"></a>TSIL_SampleElectrode</STRONG> (Thumb, 260 bytes, Stack size 24 bytes, tss_sensortsil.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = TSIL_SampleElectrode &rArr; TSIL_MethodControl &rArr; TSIL_Recalibrate
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSIL_HandleMeasurement
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSIL_ReadCounter
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSIL_MethodControl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tss_sensor.o(.constdata)
</UL>
<P><STRONG><a name="[20]"></a>TSS_TSI0Isr</STRONG> (Thumb, 246 bytes, Stack size 24 bytes, tss_sensortsil.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = TSS_TSI0Isr &rArr; TSS_SetSystemConfig &rArr; TSS_Init &rArr; TSS_KeyDetectorInit &rArr; TSS_SensorInit &rArr; TSS_BrowseModules
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_GetSystemConfig
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_SetSystemConfig
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(RESET)
</UL>
<P><STRONG><a name="[a5]"></a>FMSTR_TsaGetTable_UserAppTable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, main.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMSTR_TsaGetTable
</UL>

<P><STRONG><a name="[76]"></a>FMSTR_TsaGetTable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMSTR_TsaGetTable_UserAppTable
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMSTR_CheckTsaSpace
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMSTR_GetTsaInfo
</UL>

<P><STRONG><a name="[26]"></a>main</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = main &rArr; TSS_Init_ASlider &rArr; TSS_SetASliderConfig &rArr; TSS_SetControlElectrodesEnablers &rArr; TSS_SensorInit &rArr; TSS_BrowseModules
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_Task
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_init
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_Init_ASlider
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMS
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPorts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_mkl25z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mkl25z4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mkl25z4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mkl25z4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mkl25z4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mkl25z4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>ADC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl25z4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>CMP0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl25z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>DAC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl25z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>DMA0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl25z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DMA1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl25z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>DMA2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl25z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>DMA3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl25z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(RESET)
</UL>
<P><STRONG><a name="[e3]"></a>DefaultISR</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl25z4.o(.text), UNUSED)

<P><STRONG><a name="[b]"></a>FTFA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl25z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl25z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl25z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>LLW_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl25z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(RESET)
</UL>
<P><STRONG><a name="[e4]"></a>LPTimer_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl25z4.o(.text), UNUSED)

<P><STRONG><a name="[c]"></a>LVD_LVW_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl25z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>MCG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl25z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>PIT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl25z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>PORTA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl25z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>PORTD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl25z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl25z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>RTC_Seconds_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl25z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>Reserved20_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl25z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>Reserved39_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl25z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>Reserved45_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl25z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl25z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl25z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>TPM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl25z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>TPM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl25z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>TPM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl25z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(RESET)
</UL>
<P><STRONG><a name="[e5]"></a>TSI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl25z4.o(.text), UNUSED)

<P><STRONG><a name="[e6]"></a>UART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl25z4.o(.text), UNUSED)

<P><STRONG><a name="[13]"></a>UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl25z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>UART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl25z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>USB0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl25z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(RESET)
</UL>
<P><STRONG><a name="[a8]"></a>FreeMASTER_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, board.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_irq
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMSTR_Init
</UL>

<P><STRONG><a name="[a6]"></a>PWM_init</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, board.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PWM_init
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4f]"></a>LPTMRInit</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, board.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LPTMRInit
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_Init_ASlider
</UL>

<P><STRONG><a name="[4a]"></a>LPTMRStop</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, board.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPTMRStop
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_Init_ASlider
</UL>

<P><STRONG><a name="[22]"></a>LPTMRIsr</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, board.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = LPTMRIsr &rArr; DelayMS
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_GetSystemConfig
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMS
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(RESET)
</UL>
<P><STRONG><a name="[ab]"></a>GotoLowPower</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, board.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_GetSystemConfig
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_SetSystemConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowPowerControl
</UL>

<P><STRONG><a name="[ad]"></a>LowPowerControl</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, board.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GotoLowPower
</UL>

<P><STRONG><a name="[50]"></a>InitDevices</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, board.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_fOnInit
</UL>

<P><STRONG><a name="[e7]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[8e]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_KeyDetectorSignalDivider
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_ASliderTrendThreshold
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_ASliderDecoder
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_ASliderCalculatePosIIRFilter
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atc
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>

<P><STRONG><a name="[e8]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, idiv.o(.text), UNUSED)

<P><STRONG><a name="[7c]"></a>__aeabi_idivmod</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, idiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_KeyBasicSensAutoCalibration
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_KeyBasicDeltaNoiseAnalysisIIRControl
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_init
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atc
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fei_fee
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fei_fbi
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fee_fbi
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fbi_fee
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blpi_fbi
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fbi_blpi
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fbe_fbi
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fbe_fee
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blpe_pbe
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fbe_pbe
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbe_pee
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pll_init
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_KeyBasicEvaluateNoiseData
</UL>

<P><STRONG><a name="[91]"></a>__aeabi_fmul</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, fmul.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atc
</UL>

<P><STRONG><a name="[90]"></a>__aeabi_fdiv</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, fdiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atc
</UL>

<P><STRONG><a name="[92]"></a>__ARM_scalbnf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fscalb.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atc
</UL>

<P><STRONG><a name="[e9]"></a>scalbnf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fscalb.o(.text), UNUSED)

<P><STRONG><a name="[8f]"></a>__aeabi_i2f</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, fflti.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atc
</UL>

<P><STRONG><a name="[93]"></a>__aeabi_f2uiz</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ffixui.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atc
</UL>

<P><STRONG><a name="[ea]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[ae]"></a>_float_round</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fepilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>

<P><STRONG><a name="[af]"></a>_float_epilogue</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, fepilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>

<P><STRONG><a name="[46]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[eb]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[3a]"></a>TSS_ASliderCalculatePosIIRFilter</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, tss_asliderdecoder.o(i.TSS_ASliderCalculatePosIIRFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = TSS_ASliderCalculatePosIIRFilter &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_SubUInt16WithUInt16ToSInt16
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tss_systemsetupdata.o(.constdata)
</UL>
<P><STRONG><a name="[2e]"></a>TSS_ASliderDecoder</STRONG> (Thumb, 1108 bytes, Stack size 96 bytes, tss_asliderdecoder.o(i.TSS_ASliderDecoder))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = TSS_ASliderDecoder &rArr; TSS_SetControlElectrodesEnablers &rArr; TSS_SensorInit &rArr; TSS_BrowseModules
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_SetControlElectrodesEnablers
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tss_systemsetupdata.o(.constdata)
</UL>
<P><STRONG><a name="[3c]"></a>TSS_ASliderTrendControl</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, tss_asliderdecoder.o(i.TSS_ASliderTrendControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TSS_ASliderTrendControl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tss_systemsetupdata.o(.constdata)
</UL>
<P><STRONG><a name="[3b]"></a>TSS_ASliderTrendThreshold</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, tss_asliderdecoder.o(i.TSS_ASliderTrendThreshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TSS_ASliderTrendThreshold &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tss_systemsetupdata.o(.constdata)
</UL>
<P><STRONG><a name="[5e]"></a>TSS_BrowseModules</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, tss_main.o(i.TSS_BrowseModules))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TSS_BrowseModules
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_KeyDetectorGetElectrodeEnablerStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_SensorInit
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_KeyDetectorRecalibrateModules
</UL>

<P><STRONG><a name="[bb]"></a>TSS_CutSInt16ToSInt8</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, tss_filters.o(i.TSS_CutSInt16ToSInt8))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_KeyBasicSensAutoCalibration
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_KeyBasicDeltaNoiseAnalysisIIRControl
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_KeyBasicEvaluateNoiseData
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_KeyDetectorCalculateDelta
</UL>

<P><STRONG><a name="[34]"></a>TSS_DataCorruptionCheck</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, tss_main.o(i.TSS_DataCorruptionCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TSS_DataCorruptionCheck
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tss_systemsetupdata.o(.constdata)
</UL>
<P><STRONG><a name="[2f]"></a>TSS_DecodersControl</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, tss_main.o(i.TSS_DecodersControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = TSS_DecodersControl &rArr; TSS_KeyDetectorGetElectrodeGroupStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_KeyDetectorGetElectrodeGroupStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tss_systemsetupdata.o(.constdata)
</UL>
<P><STRONG><a name="[ca]"></a>TSS_FaultEvaluation</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, tss_main.o(i.TSS_FaultEvaluation))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TSS_FaultEvaluation
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_Task
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_KeyDetectorMain
</UL>

<P><STRONG><a name="[9b]"></a>TSS_GetSystemConfig</STRONG> (Thumb, 230 bytes, Stack size 16 bytes, tss_main.o(i.TSS_GetSystemConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TSS_GetSystemConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTMRIsr
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_TSI0Isr
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSIL_InitThresholds
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GotoLowPower
</UL>

<P><STRONG><a name="[4c]"></a>TSS_Init</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, tss_main.o(i.TSS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = TSS_Init &rArr; TSS_KeyDetectorInit &rArr; TSS_SensorInit &rArr; TSS_BrowseModules
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_InitRegisterArrays
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_InitInternalArrays
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_KeyDetectorInit
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_SetSystemConfig
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_Init_ASlider
</UL>

<P><STRONG><a name="[b5]"></a>TSS_InitInternalArrays</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, tss_main.o(i.TSS_InitInternalArrays))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TSS_InitInternalArrays &rArr; TSS_KeyDetectorResetElectrode
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_KeyDetectorRestartElectrode
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_KeyDetectorResetElectrodeMeasured
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_KeyDetectorResetElectrode
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_Init
</UL>

<P><STRONG><a name="[b6]"></a>TSS_InitRegisterArrays</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, tss_main.o(i.TSS_InitRegisterArrays))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TSS_InitRegisterArrays
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_Init
</UL>

<P><STRONG><a name="[43]"></a>TSS_KeyBasicDeltaNoiseAnalysisIIRControl</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, tss_keydetectornormal.o(i.TSS_KeyBasicDeltaNoiseAnalysisIIRControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = TSS_KeyBasicDeltaNoiseAnalysisIIRControl &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_CutSInt16ToSInt8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tss_systemsetupdata.o(.constdata)
</UL>
<P><STRONG><a name="[bc]"></a>TSS_KeyBasicDetect</STRONG> (Thumb, 378 bytes, Stack size 40 bytes, tss_keydetectornormal.o(i.TSS_KeyBasicDetect))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TSS_KeyBasicDetect &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_KeyDetectorResetElectrodeDebouncing
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_KeyDetectorElectrodeStatusUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_KeyBasicElectrodeEval
</UL>

<P><STRONG><a name="[44]"></a>TSS_KeyBasicElectrodeEval</STRONG> (Thumb, 578 bytes, Stack size 40 bytes, tss_keydetectornormal.o(i.TSS_KeyBasicElectrodeEval))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = TSS_KeyBasicElectrodeEval &rArr; TSS_KeyBasicDetect &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_KeyBasicDetect
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_KeyDetectorResetElectrode
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_KeyDetectorReleaseElectrode
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_KeyDetectorGetSlowDCTrackerCounter
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_KeyDetectorGetShieldElectrodeReleaseStatus
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_KeyDetectorGetElectrodeEnablerStatus
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_KeyDetectorGetDCTrackerCounter
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_KeyDetectorCalibrate
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_KeyDetectorCalculateDelta
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tss_systemsetupdata.o(.constdata)
</UL>
<P><STRONG><a name="[3f]"></a>TSS_KeyBasicNegativeBaselineDrop</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, tss_keydetectornormal.o(i.TSS_KeyBasicNegativeBaselineDrop))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TSS_KeyBasicNegativeBaselineDrop &rArr; TSS_KeyDetectorResetElectrode
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_KeyDetectorResetElectrode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tss_systemsetupdata.o(.constdata)
</UL>
<P><STRONG><a name="[42]"></a>TSS_KeyBasicSensAutoCalibration</STRONG> (Thumb, 536 bytes, Stack size 40 bytes, tss_keydetectornormal.o(i.TSS_KeyBasicSensAutoCalibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = TSS_KeyBasicSensAutoCalibration &rArr; TSS_KeyBasicEvaluateNoiseData &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_KeyBasicEvaluateNoiseData
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_KeyDetectorGetElectrodeEnablerStatus
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_KeyDetectorCalculateDelta
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_CutSInt16ToSInt8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tss_systemsetupdata.o(.constdata)
</UL>
<P><STRONG><a name="[3d]"></a>TSS_KeyBasicStuckKeyControl</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, tss_keydetectornormal.o(i.TSS_KeyBasicStuckKeyControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TSS_KeyBasicStuckKeyControl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tss_systemsetupdata.o(.constdata)
</UL>
<P><STRONG><a name="[bf]"></a>TSS_KeyDetectorCalculateDelta</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, tss_keydetector.o(i.TSS_KeyDetectorCalculateDelta))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TSS_KeyDetectorCalculateDelta
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_CutSInt16ToSInt8
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_SubUInt16WithUInt16ToSInt16
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_KeyBasicSensAutoCalibration
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_KeyBasicElectrodeEval
</UL>

<P><STRONG><a name="[30]"></a>TSS_KeyDetectorCalculateIIRFilter</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, tss_filters.o(i.TSS_KeyDetectorCalculateIIRFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TSS_KeyDetectorCalculateIIRFilter
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_IIRFilterEquation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tss_systemsetupdata.o(.constdata)
</UL>
<P><STRONG><a name="[c4]"></a>TSS_KeyDetectorCalibrate</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, tss_keydetector.o(i.TSS_KeyDetectorCalibrate))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_KeyBasicElectrodeEval
</UL>

<P><STRONG><a name="[be]"></a>TSS_KeyDetectorElectrodeStatusUpdate</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, tss_keydetector.o(i.TSS_KeyDetectorElectrodeStatusUpdate))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_KeyBasicDetect
</UL>

<P><STRONG><a name="[32]"></a>TSS_KeyDetectorFillDeltaLogBuffer</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tss_keydetector.o(i.TSS_KeyDetectorFillDeltaLogBuffer))
<BR>[Address Reference Count : 1]<UL><LI> tss_systemsetupdata.o(.constdata)
</UL>
<P><STRONG><a name="[33]"></a>TSS_KeyDetectorFillSignalLogBuffer</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tss_keydetector.o(i.TSS_KeyDetectorFillSignalLogBuffer))
<BR>[Address Reference Count : 1]<UL><LI> tss_systemsetupdata.o(.constdata)
</UL>
<P><STRONG><a name="[c2]"></a>TSS_KeyDetectorGetDCTrackerCounter</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tss_keydetector.o(i.TSS_KeyDetectorGetDCTrackerCounter))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_KeyBasicElectrodeEval
</UL>

<P><STRONG><a name="[b3]"></a>TSS_KeyDetectorGetElectrodeEnablerStatus</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, tss_keydetector.o(i.TSS_KeyDetectorGetElectrodeEnablerStatus))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_KeyBasicSensAutoCalibration
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_KeyBasicElectrodeEval
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_BrowseModules
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_KeyDetectorRecalibrateElectrode
</UL>

<P><STRONG><a name="[b4]"></a>TSS_KeyDetectorGetElectrodeGroupStatus</STRONG> (Thumb, 60 bytes, Stack size 20 bytes, tss_keydetector.o(i.TSS_KeyDetectorGetElectrodeGroupStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TSS_KeyDetectorGetElectrodeGroupStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_DecodersControl
</UL>

<P><STRONG><a name="[c1]"></a>TSS_KeyDetectorGetShieldElectrodeReleaseStatus</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, tss_keydetector.o(i.TSS_KeyDetectorGetShieldElectrodeReleaseStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TSS_KeyDetectorGetShieldElectrodeReleaseStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_KeyBasicElectrodeEval
</UL>

<P><STRONG><a name="[c3]"></a>TSS_KeyDetectorGetSlowDCTrackerCounter</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tss_keydetector.o(i.TSS_KeyDetectorGetSlowDCTrackerCounter))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_KeyBasicElectrodeEval
</UL>

<P><STRONG><a name="[b7]"></a>TSS_KeyDetectorInit</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, tss_keydetector.o(i.TSS_KeyDetectorInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = TSS_KeyDetectorInit &rArr; TSS_SensorInit &rArr; TSS_BrowseModules
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_SensorInit
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_Init
</UL>

<P><STRONG><a name="[31]"></a>TSS_KeyDetectorInitPrevCapSample</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tss_filters.o(i.TSS_KeyDetectorInitPrevCapSample))
<BR>[Address Reference Count : 1]<UL><LI> tss_systemsetupdata.o(.constdata)
</UL>
<P><STRONG><a name="[c8]"></a>TSS_KeyDetectorMain</STRONG> (Thumb, 364 bytes, Stack size 40 bytes, tss_keydetector.o(i.TSS_KeyDetectorMain))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = TSS_KeyDetectorMain &rArr; TSS_SensorInit &rArr; TSS_BrowseModules
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_SensorInit
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_FaultEvaluation
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_KeyDetectorResetElectrodeMeasured
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_KeyDetectorReleaseElectrode
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_KeyDetectorFaultDecoder
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_KeyDetectorDCTrackerEvalExecution
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_Task
</UL>

<P><STRONG><a name="[cb]"></a>TSS_KeyDetectorRecalibrateModules</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, tss_keydetector.o(i.TSS_KeyDetectorRecalibrateModules))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TSS_KeyDetectorRecalibrateModules &rArr; TSS_BrowseModules
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_BrowseModules
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_Task
</UL>

<P><STRONG><a name="[40]"></a>TSS_KeyDetectorRecalibrationRequest</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, tss_keydetector.o(i.TSS_KeyDetectorRecalibrationRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TSS_KeyDetectorRecalibrationRequest &rArr; TSS_KeyDetectorRecalibrateElectrode
</UL>
<BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_KeyDetectorRecalibrateElectrode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tss_systemsetupdata.o(.constdata)
</UL>
<P><STRONG><a name="[c0]"></a>TSS_KeyDetectorReleaseElectrode</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, tss_keydetector.o(i.TSS_KeyDetectorReleaseElectrode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TSS_KeyDetectorReleaseElectrode
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_KeyBasicElectrodeEval
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_KeyDetectorMain
</UL>

<P><STRONG><a name="[b8]"></a>TSS_KeyDetectorResetElectrode</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, tss_keydetector.o(i.TSS_KeyDetectorResetElectrode))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = TSS_KeyDetectorResetElectrode
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_KeyDetectorResetElectrodeDebouncing
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_KeyBasicNegativeBaselineDrop
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_KeyBasicElectrodeEval
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_InitInternalArrays
</UL>

<P><STRONG><a name="[bd]"></a>TSS_KeyDetectorResetElectrodeDebouncing</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tss_keydetector.o(i.TSS_KeyDetectorResetElectrodeDebouncing))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_KeyBasicDetect
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_KeyDetectorResetElectrode
</UL>

<P><STRONG><a name="[ba]"></a>TSS_KeyDetectorResetElectrodeMeasured</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tss_keydetector.o(i.TSS_KeyDetectorResetElectrodeMeasured))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_InitInternalArrays
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_KeyDetectorMain
</UL>

<P><STRONG><a name="[3e]"></a>TSS_KeyDetectorResetStuckKeyCounter</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tss_keydetector.o(i.TSS_KeyDetectorResetStuckKeyCounter))
<BR>[Address Reference Count : 1]<UL><LI> tss_systemsetupdata.o(.constdata)
</UL>
<P><STRONG><a name="[b9]"></a>TSS_KeyDetectorRestartElectrode</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, tss_keydetector.o(i.TSS_KeyDetectorRestartElectrode))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_InitInternalArrays
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_KeyDetectorRecalibrateElectrode
</UL>

<P><STRONG><a name="[41]"></a>TSS_KeyDetectorSignalDivider</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, tss_filters.o(i.TSS_KeyDetectorSignalDivider))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TSS_KeyDetectorSignalDivider &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tss_systemsetupdata.o(.constdata)
</UL>
<P><STRONG><a name="[37]"></a>TSS_LowPowerConfig</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, tss_main.o(i.TSS_LowPowerConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = TSS_LowPowerConfig &rArr; TSS_SensorInit &rArr; TSS_BrowseModules
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_SensorInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tss_systemsetupdata.o(.constdata)
</UL>
<P><STRONG><a name="[4e]"></a>TSS_SetASliderConfig</STRONG> (Thumb, 240 bytes, Stack size 32 bytes, tss_asliderdecoder.o(i.TSS_SetASliderConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = TSS_SetASliderConfig &rArr; TSS_SetControlElectrodesEnablers &rArr; TSS_SensorInit &rArr; TSS_BrowseModules
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_SetControlElectrodesEnablers
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_Init_ASlider
</UL>

<P><STRONG><a name="[b2]"></a>TSS_SetControlElectrodesEnablers</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, tss_main.o(i.TSS_SetControlElectrodesEnablers))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = TSS_SetControlElectrodesEnablers &rArr; TSS_SensorInit &rArr; TSS_BrowseModules
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_SensorInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_ASliderDecoder
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_SetASliderConfig
</UL>

<P><STRONG><a name="[4d]"></a>TSS_SetSystemConfig</STRONG> (Thumb, 742 bytes, Stack size 24 bytes, tss_main.o(i.TSS_SetSystemConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = TSS_SetSystemConfig &rArr; TSS_Init &rArr; TSS_KeyDetectorInit &rArr; TSS_SensorInit &rArr; TSS_BrowseModules
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_SensorInit
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_TSI0Isr
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_fOnFault
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_Init_ASlider
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GotoLowPower
</UL>

<P><STRONG><a name="[b1]"></a>TSS_SubUInt16WithUInt16ToSInt16</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, tss_filters.o(i.TSS_SubUInt16WithUInt16ToSInt16))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_ASliderCalculatePosIIRFilter
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_KeyDetectorCalculateDelta
</UL>

<P><STRONG><a name="[a7]"></a>TSS_Task</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, tss_main.o(i.TSS_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = TSS_Task &rArr; TSS_KeyDetectorMain &rArr; TSS_SensorInit &rArr; TSS_BrowseModules
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_FaultEvaluation
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_KeyDetectorRecalibrateModules
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_KeyDetectorMain
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[35]"></a>TSS_TriggerConfig</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, tss_main.o(i.TSS_TriggerConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = TSS_TriggerConfig &rArr; TSS_SensorInit &rArr; TSS_BrowseModules
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_SensorInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tss_systemsetupdata.o(.constdata)
</UL>
<P><STRONG><a name="[36]"></a>TSS_TriggerControl</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, tss_main.o(i.TSS_TriggerControl))
<BR>[Address Reference Count : 1]<UL><LI> tss_systemsetupdata.o(.constdata)
</UL>
<P><STRONG><a name="[9c]"></a>__ARM_common_switch8</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, tss_sensortsil.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSIL_MethodControl
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSIL_SampleElectrode
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_SetASliderConfig
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_KeyBasicDetect
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_KeyDetectorFaultDecoder
</UL>

<P><STRONG><a name="[ec]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[ed]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[ee]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[74]"></a>FMSTR_Listen</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, freemaster_serial.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMSTR_Tx
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMSTR_InitSerial
</UL>

<P><STRONG><a name="[72]"></a>FMSTR_SendError</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, freemaster_serial.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMSTR_SendResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMSTR_Rx
</UL>

<P><STRONG><a name="[79]"></a>FMSTR_CheckMemSpace</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, freemaster_tsa.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMSTR_CheckTsaSpace
</UL>

<P><STRONG><a name="[c9]"></a>TSS_KeyDetectorDCTrackerEvalExecution</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, tss_keydetector.o(i.TSS_KeyDetectorDCTrackerEvalExecution))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_KeyDetectorMain
</UL>

<P><STRONG><a name="[c7]"></a>TSS_KeyDetectorFaultDecoder</STRONG> (Thumb, 38 bytes, Stack size 4 bytes, tss_keydetector.o(i.TSS_KeyDetectorFaultDecoder))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TSS_KeyDetectorFaultDecoder &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_KeyDetectorMain
</UL>

<P><STRONG><a name="[2a]"></a>TSS_KeyDetectorRecalibrateElectrode</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, tss_keydetector.o(i.TSS_KeyDetectorRecalibrateElectrode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TSS_KeyDetectorRecalibrateElectrode
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_KeyDetectorRestartElectrode
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_KeyDetectorGetElectrodeEnablerStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_KeyDetectorRecalibrationRequest
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tss_keydetector.o(i.TSS_KeyDetectorRecalibrateModules)
</UL>
<P><STRONG><a name="[c5]"></a>TSS_KeyBasicEvaluateNoiseData</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, tss_keydetectornormal.o(i.TSS_KeyBasicEvaluateNoiseData))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = TSS_KeyBasicEvaluateNoiseData &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_CutSInt16ToSInt8
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_KeyBasicSensAutoCalibration
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
